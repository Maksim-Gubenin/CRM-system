"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
import sys
from os import getenv
from pathlib import Path
from typing import Any, Dict

from django.contrib.messages import constants as messages
from django.utils.translation import gettext_lazy as _
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
load_dotenv(BASE_DIR / ".env")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
if "test" in sys.argv:
    SECRET_KEY = "test-secret-key-for-ci-12345"
else:
    SECRET_KEY = getenv(
        "DJANGO_SECRET_KEY", "django-insecure-fallback-key-for-development"
    )

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = getenv("DJANGO_DEBUG", "0") == "1"

ALLOWED_HOSTS = getenv("ALLOWED_HOSTS", "127.0.0.1, localhost").split(",")

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "crm.apps.CrmConfig",
    "leads.apps.LeadsConfig",
    "advertisements.apps.AdvertisementsConfig",
    "products.apps.ProductsConfig",
    "customers.apps.CustomersConfig",
    "contracts.apps.ContractsConfig",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates/"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": getenv("DB_NAME", "crm_system"),
        "USER": getenv("DB_USER", "web_app"),
        "PASSWORD": getenv("DB_PASSWORD", "5966952900ae"),
        "HOST": getenv("DB_HOST", "localhost"),
        "PORT": getenv("DB_PORT", 5432),
    }
}

if "test" in sys.argv:
    DATABASES["default"] = {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": ":memory:",
    }

# Cache configuration
if "test" in sys.argv:
    # Use in-memory cache for tests
    CACHES: Dict[str, Dict[str, Any]] = {
        "default": {
            "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
            "LOCATION": "unique-snowflake",
        }
    }
    # Use database session backend for tests
    SESSION_ENGINE = "django.contrib.sessions.backends.db"
else:
    # Use Redis for production/development
    CACHES = {
        "default": {
            "BACKEND": "django_redis.cache.RedisCache",
            "LOCATION": "redis://localhost:6379/1",
            "OPTIONS": {
                "CLIENT_CLASS": "django_redis.client.DefaultClient",
                "MAX_ENTRIES": 1000,
                "CULL_FREQUENCY": 3,
                "IGNORE_EXCEPTIONS": True,
                "SOCKET_CONNECT_TIMEOUT": 5,
                "SOCKET_TIMEOUT": 5,
            },
            "KEY_PREFIX": "crm",
        }
    }
    SESSION_ENGINE = "django.contrib.sessions.backends.cache"
    SESSION_CACHE_ALIAS = "default"

MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation."
        "UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en"

LANGUAGES = [
    ("en", _("English")),
    ("ru", _("Russian")),
]

LOCALE_PATHS = [
    os.path.join(BASE_DIR, "templates", "locale"),
    os.path.join(BASE_DIR, "products", "locale"),
    os.path.join(BASE_DIR, "leads", "locale"),
    os.path.join(BASE_DIR, "advertisements", "locale"),
    os.path.join(BASE_DIR, "contracts", "locale"),
    os.path.join(BASE_DIR, "customers", "locale"),
]

TIME_ZONE = "UTC"

USE_I18N = True
USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "/static/"
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

LOGIN_URL = "/accounts/login/"
LOGIN_REDIRECT_URL = "/"
LOGOUT_REDIRECT_URL = "/accounts/login/"

os.makedirs(BASE_DIR / ".cache", exist_ok=True)

LOG_DIR = BASE_DIR / "logs"
LOG_DIR.mkdir(exist_ok=True)

LOGLEVEL = getenv("DJANGO_LOGLEVEL", "INFO").upper()

if "test" in sys.argv:
    # Disable logging during tests
    LOGGING = {
        "version": 1,
        "disable_existing_loggers": True,
        "handlers": {
            "null": {
                "level": "DEBUG",
                "class": "logging.NullHandler",
            },
        },
        "loggers": {
            "": {
                "handlers": ["null"],
                "level": "DEBUG",
                "propagate": False,
            },
        },
    }
else:
    LOGGING = {
        "version": 1,
        "disable_existing_loggers": False,
        "formatters": {
            "verbose": {
                "format": "{levelname} {asctime} {module} "
                "{process:d} {thread:d} {message}",
                "style": "{",
            },
            "simple": {
                "format": "{levelname} {asctime} {module} {message}",
                "style": "{",
            },
            "django.server": {
                "()": "django.utils.log.ServerFormatter",
                "format": "[{server_time}] {message}",
                "style": "{",
            },
        },
        "filters": {
            "require_debug_true": {
                "()": "django.utils.log.RequireDebugTrue",
            },
            "require_debug_false": {
                "()": "django.utils.log.RequireDebugFalse",
            },
        },
        "handlers": {
            "file": {
                "level": "INFO",
                "class": "logging.handlers.RotatingFileHandler",
                "filename": LOG_DIR / "django.log",
                "maxBytes": 1024 * 1024 * 5,  # 5 MB
                "backupCount": 5,
                "formatter": "verbose",
            },
            "error_file": {
                "level": "ERROR",
                "class": "logging.handlers.RotatingFileHandler",
                "filename": LOG_DIR / "errors.log",
                "maxBytes": 1024 * 1024 * 5,  # 5 MB
                "backupCount": 5,
                "formatter": "verbose",
            },
            "console": {
                "level": "DEBUG",
                "filters": ["require_debug_true"],
                "class": "logging.StreamHandler",
                "formatter": "simple",
            },
            "db_log": {
                "level": "DEBUG",
                "class": "logging.handlers.RotatingFileHandler",
                "filename": LOG_DIR / "db_queries.log",
                "maxBytes": 1024 * 1024 * 2,  # 2 MB
                "backupCount": 3,
                "formatter": "verbose",
            },
            "security_log": {
                "level": "INFO",
                "class": "logging.handlers.RotatingFileHandler",
                "filename": LOG_DIR / "security.log",
                "maxBytes": 1024 * 1024 * 2,  # 2 MB
                "backupCount": 3,
                "formatter": "verbose",
            },
            "crm_log": {
                "level": "INFO",
                "class": "logging.handlers.RotatingFileHandler",
                "filename": LOG_DIR / "crm_business.log",
                "maxBytes": 1024 * 1024 * 5,  # 5 MB
                "backupCount": 5,
                "formatter": "verbose",
            },
            "mail_admins": {
                "level": "ERROR",
                "filters": ["require_debug_false"],
                "class": "django.utils.log.AdminEmailHandler",
                "formatter": "verbose",
            },
        },
        "loggers": {
            "": {
                "handlers": ["console", "file", "error_file"],
                "level": "INFO",
                "propagate": True,
            },
            "django": {
                "handlers": ["console", "file", "error_file"],
                "level": "INFO",
                "propagate": False,
            },
            "django.db.backends": {
                "handlers": ["db_log"],
                "level": "DEBUG" if DEBUG else "INFO",
                "propagate": False,
            },
            "django.security": {
                "handlers": ["security_log", "mail_admins"],
                "level": "INFO",
                "propagate": False,
            },
            "django.server": {
                "handlers": ["console", "file"],
                "level": "INFO",
                "propagate": False,
            },
            "crm": {
                "handlers": ["crm_log", "console"],
                "level": "INFO",
                "propagate": False,
            },
            "leads": {
                "handlers": ["crm_log", "console"],
                "level": "INFO",
                "propagate": False,
            },
            "advertisements": {
                "handlers": ["crm_log", "console"],
                "level": "INFO",
                "propagate": False,
            },
            "products": {
                "handlers": ["crm_log", "console"],
                "level": "INFO",
                "propagate": False,
            },
            "customers": {
                "handlers": ["crm_log", "console"],
                "level": "INFO",
                "propagate": False,
            },
            "contracts": {
                "handlers": ["crm_log", "console"],
                "level": "INFO",
                "propagate": False,
            },
        },
    }

if not DEBUG:
    ADMINS = [("Admin", getenv("ADMIN_EMAIL", "admin@example.com"))]
    EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
    EMAIL_HOST = getenv("EMAIL_HOST", "smtp.gmail.com")
    EMAIL_PORT = int(getenv("EMAIL_PORT", 587))
    EMAIL_USE_TLS = getenv("EMAIL_USE_TLS", "True") == "True"
    EMAIL_HOST_USER = getenv("EMAIL_HOST_USER", "")
    EMAIL_HOST_PASSWORD = getenv("EMAIL_HOST_PASSWORD", "")
    SERVER_EMAIL = getenv("SERVER_EMAIL", EMAIL_HOST_USER)

MESSAGE_TAGS = {
    messages.DEBUG: "debug",
    messages.INFO: "info",
    messages.SUCCESS: "success",
    messages.WARNING: "warning",
    messages.ERROR: "danger",
}

MESSAGE_STORAGE = "django.contrib.messages.storage.session.SessionStorage"
