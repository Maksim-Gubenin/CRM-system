from typing import Any

from django.core.validators import MinValueValidator
from django.db import models
from django.db.models import Sum
from django.urls import reverse
from django.utils.translation import gettext_lazy as _

from contracts.models import Contract
from crm.models import BaseModel


class Advertisement(BaseModel):
    """Represents an advertising campaign in the CRM system.

    Attributes:
        name (str): Campaign name. Max length 255 chars, indexed.
        channel (str): Advertising channel (social, search, context, email, other).
        cost (Decimal): Campaign budget with min value 0.
        product (Product): Product being advertised (FK to Product).
        is_active (bool): Indicates if campaign is currently active.

    Methods:
        leads_count(): Returns number of leads generated by this campaign.
        customers_count(): Returns number of leads converted to customers.
        conversion_rate(): Calculates lead to customer conversion rate.
        profit(): Calculates ROI (return on investment) ratio.
        get_absolute_url(): Returns URL for advertisement detail view.
    """

    class Meta:
        """Metadata options for the Advertisement model."""

        ordering = ["-cost"]
        verbose_name = _("Advertisement")
        verbose_name_plural = _("Advertisements")

    class Channel(models.TextChoices):
        """
        Enumeration of available advertising channels.

        Options:
        - SOCIAL: Social media platforms
        - SEARCH: Search engine advertising
        - CONTEXT: Contextual advertising networks
        - EMAIL: Email marketing campaigns
        - OTHER: Other advertising methods
        """

        SOCIAL = "social", _("Social Media")
        SEARCH = "search", _("Search Engines")
        CONTEXT = "context", _("Context Ads")
        EMAIL = "email", _("Email Marketing")
        OTHER = "other", _("Other")

    name = models.CharField(
        max_length=255,
        db_index=True,
        verbose_name=_("Campaign name"),
        help_text=_("Name of the advertising campaign"),
    )

    channel = models.CharField(
        max_length=20,
        db_index=True,
        choices=Channel.choices,
        default=Channel.SOCIAL,
        verbose_name=_("Advertising channel"),
        help_text=_("Primary advertising channel"),
    )

    cost = models.DecimalField(
        validators=[MinValueValidator(0)],
        max_digits=12,
        decimal_places=2,
        verbose_name=_("Budget"),
        help_text=_("Total budget for the campaign"),
    )

    product = models.ForeignKey(
        "products.Product",
        on_delete=models.CASCADE,
        verbose_name=_("Product"),
        help_text=_("Product being advertised"),
    )

    is_active = models.BooleanField(
        default=True,
        verbose_name=_("Active"),
        help_text=_("Is campaign currently active"),
    )

    leads: models.Manager

    def __str__(self) -> str:
        """String representation of the advertisement."""

        return f"Ad(pk={self.pk}, name={self.name[:20]})"

    def leads_count(self) -> Any:
        """Returns the number of leads generated by this campaign.

        Returns:
            int: Count of leads from this advertisement.
        """
        return self.leads.count()

    def customers_count(self) -> Any:
        """Returns number of leads converted to customers.

        Returns:
            int: Count of leads that have been converted to customers.
        """
        return self.leads.filter(customer__isnull=False).count()

    def conversion_rate(self) -> Any:
        """Calculates lead to customer conversion rate.

        Returns:
            float: Conversion rate as decimal (0.0 to 1.0) or 0 if no leads.
        """
        total_leads = self.leads_count()
        if total_leads == 0:
            return 0.0
        return round(self.customers_count() / total_leads, 2)

    def profit(self) -> float | None:
        """Calculates ROI (return on investment) ratio.

        Returns:
            float | None: ROI ratio (income/cost) or None if no cost.
        """
        if not self.cost:
            return None

        total_income = (
            Contract.objects.filter(customer__lead__advertisement=self).aggregate(
                total_income=Sum("cost")
            )["total_income"]
            or 0
        )

        if total_income:
            roi = float(total_income) / float(self.cost)
            return round(roi, 2)

        return None

    def get_absolute_url(self) -> Any:
        """Returns the absolute URL to view this advertisement.

        Returns:
            str: Absolute URL for advertisement detail view.
        """
        return reverse("advertisements:detail", kwargs={"pk": self.pk})
